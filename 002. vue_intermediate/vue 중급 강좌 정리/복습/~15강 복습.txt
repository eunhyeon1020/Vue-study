vue cli를 사용해 vue 프로젝트 생성하기
1. npm install -g @vue/cli ==> vue 버전이 최신으로 올라감 
2. 3.0 이상, vue create 프로젝트 명 ==> 작성한 프로젝트 명을 가진 프로젝트 하나 셋업됨. 
3. vue2와 vue3를 선택하면됨(자신이 사용할 버전) 
4. cd 프로젝트 명 ==> 프로젝트로 이동해서 / npm run serve => vue 앱이 뜸 

vue component를 생성해줌. 
컴포넌트 :: TodoHeader, TodoInput, TodoList, TodoFooter 


**import와 export는 자바스크립트에서 모듈 시스템을 사용하기 위한 문법 ** 
export
- 현재 파일에서 다른 파일로 내보낼 값이나 기능을 정의할 때 사용
- 객체, 함수, 클래스 등 다른 파일에서 사용할 수 있도록 내보냄
- 여러개를 내보낼 수도 있으며, 하나의 모듈에서 하나만 내보낼 땐 export default를 사용 (우리가 쓰는 방법) 

import 
- 다른 파일에서 export한 걸 가져와서 사용하는 문법 
- default export한 건 중괄호 없이 가져옴.(우리가 쓰는 방법) 

App.vue 파일 안에서 TodoHeader 컴포넌트를 불러와서, 이 App.vue 컴포넌트의 내부에 등록하고 
그 전체 App.vue를 export default해서 Vue 앱의 루트 컴포넌트로 사용하는 구조. 
순서
1. TodoHeader.vue → export default로 자기 자신을 내보냄.
2. App.vue → import TodoHeader로 불러옴
3. App.vue 내부에서 components 옵션으로 등록함
4. App.vue 전체를 export default로 내보냄
5. Vue 앱이 시작될 때 App.vue를 루트 컴포넌트로 마운트함 (main.js에서)

<TodoInput> 
input 창에 입력한 내용이 버튼을 눌렀을 때 로컬스토리지에 넣어줘야함.

1. data()에서 newTodoItem을 빈문자열로 초기화함 
==> 그래야 vue가 newTodoItem을 반응형 데이터로 인식해 v-model, methods로 사용할 수 있음. 
==> 입력창의 값(input)이 newTodoItem에 양방향으로 바이딩됨. 

2. 사용자가 아이콘을 눌렀을 떄 v-on:click을 사용하여 addTodo()라는 함수를 호출시킴 
(input에 입력 후 enter를 눌러도 addTodo()를 호출) 

2-1. addTodo는 newTodoItem이 빈값이 아니라면 input에 넣은 newTodoItem을 로컬스토리지에 저장할 예정 
- todoList 항목을 객체 형태로 만들어 completed : false라면 완료되지 않은 상태, 입력한 값을 item으로 넣음

** todoList를 객체로 만드는 이유 **
- 단순한 문자열보다 "할 일"의 상태를 같이 저장하기 위해(todo 앱이기 떄문에 완료되었는지 안되었는지 기억해야함)
- 나중에 꺼내서 리스트를 그릴 때, 상태를 구분하기 쉬움
- 기능 확장할 때 유리(작성일이나 우선순위같이 나중에 기능 확장에 유리)

- localStorag는 브라우저에 정보를 key-value(객체)형태로 저장하는 저장소 
- localStorag.setItem(key, value) 메서드 사용(브라우저에 데이터를 저장할 수 있는 함수) 
==> key : this.newTodoItem(사용자가 입력한 텍스트), value : obj를 json.stringify()로 문자열 변환한 값
(로컬스토리지는 문자열만 저장 가능하므로, 객체를 문자열로 변환해야함) 
3. 할 일 추가가 끝났다면 clearInput를 호출 
- clearInput은 newTodoItem 입력창을 비워주는 역할 

<TodoList> 
로컬스토리지에 있는 item을 꺼내와 리스트 화면에 보여줘야함. 
1. created 속성 이용하기 
==> 인스턴스(객체)가 생성되자마자 실행할 로직을 created 속성에 정의 가능 
- 화면에 뜨자마자 데이터가 노출되어야하니 created 속성에 데이터 출력 로직을 작성 

2. localStorage에서 데이터를 가져와 todoItems 배열에 담아주기 
- localStorage에 저장된 데이터 개수 존재한다면 localStorage에 저장된 데이터 개수 만큼 for문을 돌림.
- localStorage의 키가 loglevel:webpack-dev-server 아니라면 todoItem에 값을 저장하는 로직 실행 
** loglevel:webpack-dev-server 이건 webpack이 자동으로 주입하는 키 ==> 할 일만 처리하겠다는 의미 
- localStorage의 key(1,2,3 ...)를 기준으로 실제 데이터 value(문자열)를 꺼낼거임.
** localStorage.getItem(key) : 해당 key에 저장된 value(문자열=json)을 꺼냄. 
- 아까 json 형태로 문자열로 변환해서 value를 넣어줬으니 문자열을 객체로 변환시켜야 js에서 사용 가능 
** Json.parse : 문자열을 자바스크립트 객체(Object)로 변환하는 함수 
- 변환해준 value들은 todoItems 배열 안에 넣음. (배열안에는 객체가 존재)
** push(element) : 배열의 끝에 명시된 요소를 추가하고 새로운 길이를 반환함. 

3. todoItems 배열을 화면에 반복 출력 하기 
todoItems: [
  {completed: false, item: "aa"},
  {completed: false, item: "ㅇㅇㅇ"} 
]

<li v-for="(todoItem, index) in todoItems" :key="todoItem.item">
  {{ todoItem.item }}
</li>

- todoItems 배열을 반복 출력하기 위해 v-for를 사용함. 
- v-for="(todoItem, index) in todoItems" 구문은 배열을 하나씩 순회하면서 각 항목을 todoItem이라는 이름으로 받고,
  현재 인덱스는 index로 받을 수 있음. 
- li 태그에 :key="todoItem.item"을 설정해주는데, vue는 리스트를 렌더링할때 각 항목의 고유한 key가 있어야 
  어떤 항목이 변경, 추가, 삭제되었는지 추척이 가능함.
  ==> todoItem.item은 중복되지 않는 텍스트이기 때문에 key로 사용하기 적절하고 :key로 지정하면 렌더링 성능 업됨. 
** 렌더링 : 자바스크립트 데이터(변수, 객체)를 화면에 보여주는 과정, HTML을 그리는 것
** DOM : HTML문서를 자바스크립트가 이해하고 조작할 수 있도록 만든 객체 구조 ==> vue는 자동 렌더링됨. 
- 실제 텍스트는 콧수염 괄호 안에 넣어서 화면에 바인딩


로컬 스토리지에서 todoItem 삭제하기 
1. 휴지통 아이콘을 클릭하면 removeTodo 함수를 실행 
- 인자값은 todoItem, index
**인자값 : 함수에 전달될 값들 

2. 로컬스토리지에서도 해당 리스트 삭제하기 
- localStorage.removeItem(todoItem.item) : todoItem.item에 해당하는 값을 삭제하는 메서드
** localStorage.removeItem(key) : localStorag에서 특정 key에 해당하는 값을 삭제하는 메서드

3. 리스트 삭제 후 todoItems 배열에서도 즉, 화면단에서도 해당 객체 삭제 
- this.todoItems.splice(index, 1) : todoItems 배열 안에서 index위치의 항목을 1개만 삭제 
** array.splice(start[, deleteCount[, item1[, item2[, ...]]]]) 
   : 배열의 기존 요소는 삭제 또는 교체하거나 새 요소를 추가하여 배열 내용 변경 


체크박스를 눌렀을 때 로컬스토리지에서 completed = true, 화면단에서 회색처리 
체크박스를 다시 눌렀을 때 로컬스토리지에  completed = false, 화면단에서는 원상복귀 
1. 체크를 눌렀을 때 toggleComplete 함수 실행
- 인자값은 todoItem, index 
- 
1. 회색단 처리는 v-bind:class를 사용해 


