● Reactivity
: Vue.js가 추구하는 가장 중심 사상이자 핵심 기능

- 데이터 대한 변화를 뷰에서 감지해서 화면에 반영하는 것부터 그 다음에 화면 조작에 대한 API, 속성 제공
- 웹개발에 동작들을 라이브러리에서 많이 가져가고 라이브러리에서 편하게 관리해줌

● 인스턴스
: vue로 개발 할 때, 필수로 생성해야 하는 단위이자 실제로 인스턴스 안에 내용을 추가함으로써 화면을 조작할 수 있음

● 컴포넌트
: 화면의 영역을 구분해서 개발하는 방식

- 컴포넌트 개발이 웹 프레임워크, 프론트엔드 프레임워크에서 가장 중요한 개념
- 대부분의 UI가 컴포넌트 기반으로 개발이 되고 있고 코드의 반복을 줄이는 것(코드의 재사용)이 핵심

● 컴포넌트 통신
: 컴포넌트로 개발을 했을 때 데이터의 흐름을 제어하기 위한 데이터의 규칙들을 제한하면서, 제한을 했을 때 생기는 이점들은 여러명의 개발자들이 같이 개발을 하더라도 서로 같이 데이터에 대한 흐름 예측 가능

- props (상위 → 하위)
- event emit (하위 → 상위)

● HTTP 통신 라이브러리 (axios)

● 템플릿 문법
: 화면을 조작하기 위한 vue의 문법(데이터 바인딩, 뷰 디렉티브)

- 데이터 바인딩
  : reactivity가 반영한 데이터를 엮어내는 부분({{}})

- 뷰 디렉티브
  : 화면을 조작하기 위해 vue가 추가적으로 제공하는 문법(v-)

● Vue CLI
: 프로젝트를 생성할 때 명령을 이용해서 생성을 하는 방식

● 싱글 파일 컴포넌트
(실제로 내부적으로 어떻게 돌아가는지는 웹팩의 공식 문서 참고)
